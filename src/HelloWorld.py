#!/usr/bin/env python
# coding: utf-8

# In[36]:


import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn import tree
import joblib as jb

# loading the training dataset
music_data = pd.read_csv('music.csv')
X = music_data.drop(columns=['genre'])
y = music_data['genre']
# we could split the data into training and testing datasets
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

model = DecisionTreeClassifier()
# model.fit(X_train, y_train)

# this does the actual training
model.fit(X, y)
# predictions = model.predict(X_test)

# this shows a number between 0 and one, indicating how well our model predicts the results
# accuracy_score(y_test, predictions)


# this creates a dot file, which shows the decision tree generated by the model
tree.export_graphviz(model,
                     out_file='music-recommender.dot',
                     feature_names=['age', 'gender'],
                     class_names=sorted(y.unique()),
                     label='all',
                     rounded=True,
                     filled=True)

# saving the model in a joblib file
# jb.dump(model, 'music-recommender.joblib')

# loading an already saved model
# model = jb.load('music-recommender.joblib')
# predictions = model.predict([[21, 1]])
# predictions


# In[ ]:




